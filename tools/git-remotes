#!/usr/bin/env perl

# Usage: git-remotes <username>
#
# This tool deletes all remotes and adds back the ones listed in the
# code, with "origin" pointing at the fork owned by <username>.
#
# This tool is intended to be run once after cloning the repository and its
# submodules. It will delete all remotes and set them up in a standard way that
# is hopefully shared between all contributors:
#
# - upstream => The main repository into which all changes are eventually merged.
# - origin   => The current contributor's repository (i.e. *your* repo).
# - $name    => For each collaborator, another remote is added, so people can
#               work together on a problem.
#
# Note that this tool will remove all remotes and therefore all remote tracking
# statuses of branches. It will add back the master -> origin/master tracking,
# but all other branch tracking is deleted.

use strict;
use Cwd;
use Data::Dumper;

local $Data::Dumper::Indent   = 1;
local $Data::Dumper::Sortkeys = 1;
local $Data::Dumper::Terse    = 1;

sub irepo($) { $_[0] => $_[0] }
sub nrepo($) { $_[0]->[0] => $_[0] }
sub repo($) { ref $_[0] ? nrepo $_[0] : irepo $_[0] }

our %REPOS = (
   'btox' => ['bTox', {
      upstream => 'toktok',
      repo 'iphydf',
      repo 'jfreegman',
      repo 'robinlinden',
   }],
   'ci-tools' => ['ci-tools', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'c-toxcore' => ['c-toxcore', {
      upstream => 'toktok',
      repo 'green-sky',
      repo 'iphydf',
      repo ['irungentoo', 'toxcore'],
      repo ['jfreegman', 'toxcore'],
      repo ['nurupo', 'InsertProjectNameHere'],
      repo 'robinlinden',
      repo 'sudden6',
      repo 'zoff99',
      repo 'zugz',
   }],
   'c-toxcore/third_party/cmp' => ['cmp', {
      upstream => 'toktok',
      repo 'iphydf',
      repo 'camgunz',
   }],
   'c-toxcore-hs' => ['c-toxcore-hs', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'dockerfiles' => ['dockerfiles', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'experimental' => ['experimental', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'go-toxcore-c' => ['go-toxcore-c', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-apigen' => ['hs-apigen', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-cimple' => ['hs-cimple', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-github-tools' => ['hs-github-tools', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-happy-arbitrary' => ['hs-happy-arbitrary', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-msgpack-arbitrary' => ['hs-msgpack-arbitrary', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-msgpack-binary' => ['hs-msgpack-binary', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-msgpack-rpc-conduit' => ['hs-msgpack-rpc-conduit', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-msgpack-testsuite' => ['hs-msgpack-testsuite', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-msgpack-types' => ['hs-msgpack-types', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-schema' => ['hs-schema', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-tokstyle' => ['hs-tokstyle', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'hs-toxcore' => ['hs-toxcore', {
      upstream => 'toktok',
      repo 'iphydf',
      repo 'zugz',
   }],
   'hs-toxcore-c' => ['hs-toxcore-c', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'js-toxcore-c' => ['js-toxcore-c', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'py_toxcore_c' => ['py-toxcore-c', {
      upstream => 'toktok',
      repo ['aitjcize', 'PyTox'],
      repo 'iphydf',
   }],
   'qtox' => ['qtox', {
      upstream => 'toktok',
      repo 'iphydf',
      repo 'qtox',
   }],
   'spec' => ['spec', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'tools/.github' => ['.github', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'tools/toktok-fuzzer' => ['toktok-fuzzer', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'toxic' => ['toxic', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'toxins' => ['toxins', {
      upstream => 'toktok',
      repo 'iphydf',
   }],
   'toxins/toxvpn/import' => ['toxvpn', {
      upstream => 'cleverca22',
      repo 'iphydf',
   }],
   'website' => ['website', {
      upstream => 'toktok',
      repo 'iphydf',
      repo 'robinlinden',
      repo 'zoff99',
   }],
   'zig-toxcore-c' => ['zig-toxcore-c', {
      upstream => 'toktok',
      repo 'iphydf',
      repo ['nodecum', 'c-toxcore-zig'],
   }],
);

# Get map of remote -> url in current directory.
sub git_remotes { return { map { (split /\s+/)[0..1] } `git remote -v` } }

sub add_remote {
   my ($remotes, $repo, $remote, $user) = @_;
   my $url = "git\@github.com:$user/$repo";
   if (not $remotes->{$url}) {
      print "Adding $repo remote $remote -> $user\n";
      system 'git', 'remote', 'add', $remote, $url;
   }
}

sub add_remotes {
   my ($repo) = @_;

   # Delete all current remotes.
   for my $remote (sort keys %{git_remotes()}) {
      print "Removing $repo->[0] remote $remote\n";
      system 'git', 'remote', 'remove', $remote;
   }

   my %remotes = reverse %{git_remotes()};

   # Add the ones we want back.
   for my $remote (sort keys %{ $repo->[1] }) {
      my $reponame = $repo->[0];
      my $user = $repo->[1]{$remote};
      if (ref $user eq "ARRAY") {
         $reponame = $user->[1];
         $user = $user->[0];
      }
      add_remote \%remotes, $reponame, $remote, $user;
   }
}

sub process_repos {
   my ($repos) = @_;

   for my $name (sort keys %$repos) {
      my $repo = $repos->{$name};

      # Change to repo clone directory.
      my $dir = getcwd;
      chdir $name or die "could not chdir to '$name'";

      add_remotes $repo;

      chdir $dir;
   }
}

if (__PACKAGE__ eq 'main') {
   my ($username) = @ARGV or die "Usage: git-remotes <username>\n";

   # Set 'origin' to our own username.
   for (values %REPOS) {
      $_->[1]{origin} = $username;
      delete $_->[1]{$username};
   }

   # Set origin and upstream on toktok-stack.
   add_remotes ['toktok-stack', {
      upstream => 'toktok',
      origin => $username,
   }];

   process_repos \%REPOS;

   sub git_foreach {
      system 'git', 'submodule', 'foreach', @_;
   }

   # Fetch all remotes and set master to track origin/master.
   git_foreach 'git', 'fetch', '--all';
   git_foreach 'git', 'branch', '--set-upstream-to=origin/master', 'master';
}
