#!/usr/bin/env python3
import ast
import collections
import re
import sys
from typing import Dict
from typing import List
from typing import Set
from typing import Union

PackageSection = Dict[str, Union[str, List[str]]]
PackageData = Dict[str, PackageSection]


def parse_bazel(build: str) -> PackageData:
    with open(build, "r") as fh:
        bzl = ast.parse(fh.read(), filename=build)

    data: PackageData = {}

    for stmt in bzl.body:
        if (isinstance(stmt, ast.Expr) and isinstance(stmt.value, ast.Call)
                and isinstance(stmt.value.func, ast.Name)
                and stmt.value.func.id in ("haskell_library", "hspec_test")):
            section: Dict[str, Union[str, List[str]]] = {}
            for arg in stmt.value.keywords:
                if arg.arg == "name" and isinstance(arg.value, ast.Str):
                    data[arg.value.s] = section
                if arg.arg == "version" and isinstance(arg.value, ast.Str):
                    section["version"] = arg.value.s
                if arg.arg == "deps" and isinstance(arg.value, ast.List):
                    deps = []
                    for dep in arg.value.elts:
                        if isinstance(dep, ast.Call) and isinstance(
                                dep.args[0], ast.Str):
                            deps.append(dep.args[0].s)
                        elif isinstance(dep, ast.Str):
                            deps.append(dep.s)
                        else:
                            raise Exception(ast.dump(dep))
                    section["deps"] = deps

    return data


def parse_cabal(cabal: str) -> Dict[str, PackageData]:
    data: Dict[str, PackageData] = (
        collections.defaultdict(lambda: collections.defaultdict(dict)))
    section = data[""][""]
    key = ""
    value = ""

    with open(cabal, "r") as fh:
        for line in fh.readlines():
            line = line.rstrip()
            res = re.match(r"\s*([a-z-]+):\s*(.*)$", line)
            if res:
                if key:
                    values = value.split(", ")
                    section[key] = values if len(values) > 1 else value
                    key = ""
                key, value = res.group(1, 2)
                continue
            res = re.match(r"([a-z-]+)\s*([a-z-]*)$", line)
            if res:
                if key:
                    values = value.split(", ")
                    section[key] = values if len(values) > 1 else value
                    key = ""
                section = data[res.group(1)][res.group(2)]
                section["__name__"] = line
                continue
            value += line.strip()
        if key:
            values = list(value.split(", "))
            section[key] = values if len(values) > 1 else value
    return data


def resolve_bazel_deps(
        bazel: str,
        data: PackageData,
        name: str,
) -> Set[str]:
    def go(name: str) -> List[str]:
        deps = []
        rule = data.get(name, None)
        if not rule:
            print(f"missing rule for '{name}' in {bazel} {data}")
            sys.exit(1)
        for dep in rule["deps"]:
            if dep.startswith(":hs-"):
                deps.append(dep[len(":hs-"):])
            elif dep.startswith("//hs-"):
                deps.append(dep[len("//hs-"):])
            elif dep.startswith("//c-"):
                pass  # ignore native deps for now
            elif dep.startswith(":"):
                if name != "testsuite":
                    deps.extend(go(dep[1:]))
            elif dep.startswith("//third_party/haskell:"):
                deps.append(dep[len("//third_party/haskell:"):])
            else:
                raise Exception(f"deps contains unhandled dependency {dep}")
        return deps

    return set(go(name))


def must_list(maybe_list: Union[str, List[str]]) -> List[str]:
    if isinstance(maybe_list, list):
        return maybe_list
    else:
        return [maybe_list]


def must_str(maybe_list: Union[str, List[str]]) -> str:
    if isinstance(maybe_list, list):
        raise Exception(f"got list, expected str: {maybe_list}")
    else:
        return maybe_list


def check_deps(
        bazel: str,
        cabal: str,
        bazel_data: PackageData,
        bazel_name: str,
        cabal_section: PackageSection,
) -> None:
    bazel_deps = resolve_bazel_deps(bazel, bazel_data, bazel_name)
    cabal_deps = {
        dep.split(" ")[0]
        for dep in must_list(cabal_section["build-depends"])
    }

    cabal_missing = sorted(bazel_deps - cabal_deps)
    section = cabal_section["__name__"]
    if cabal_missing:
        print("{cabal} is missing deps for section "
              "'{section}' from {bazel} '{bazel_name}': "
              "{cabal_missing}".format(
                  cabal=cabal,
                  section=section,
                  bazel=bazel,
                  bazel_name=bazel_name,
                  cabal_missing=cabal_missing,
              ))
        sys.exit(1)

    bazel_missing = sorted(cabal_deps - bazel_deps)
    if bazel_missing:
        print("{bazel} is missing deps for '{bazel_name}' from "
              "{cabal} section '{section}: "
              "{bazel_missing}".format(
                  bazel=bazel,
                  bazel_name=bazel_name,
                  cabal=cabal,
                  section=section,
                  bazel_missing=bazel_missing,
              ))
        sys.exit(1)


def check_version(
        root: PackageSection,
        bazel_data: PackageData,
        package_name: str,
) -> None:
    cabal_version = root["version"]
    bazel_version = bazel_data["hs-" + package_name]["version"]
    if cabal_version != bazel_version:
        print("bazel version ({bazel_version}) and cabal version "
              "({cabal_version}) disagree".format(
                  bazel_version=bazel_version,
                  cabal_version=cabal_version,
              ))
        sys.exit(1)


def main(args: List[str]) -> None:
    bazel, cabal = args

    bazel_data = parse_bazel(bazel)
    cabal_data = parse_cabal(cabal)

    root = cabal_data[""][""]
    package_name = must_str(root["name"])

    check_deps(bazel, cabal, bazel_data, "hs-" + package_name,
               cabal_data["library"][""])
    check_deps(bazel, cabal, bazel_data, "testsuite",
               cabal_data["test-suite"]["testsuite"])

    check_version(root, bazel_data, package_name)


main(sys.argv[1:])
