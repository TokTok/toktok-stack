load("@ai_formation_hazel//tools:mangling.bzl", "hazel_library")
load("@rules_haskell//haskell:defs.bzl", "haskell_library")
load("@toktok//third_party/haskell:packages.bzl", "packages")

PACKAGE_NAME = "warp"

package(features = ["-layering_check"])

genrule(
    name = "paths",
    outs = ["Paths_warp.hs"],
    cmd = """
    cat > $@ <<EOF
module Paths_warp where

import Data.Version (Version, makeVersion)

version :: Version
version = makeVersion %s

getDataDir :: IO FilePath
getDataDir = return ""
EOF
    """ % str([int(v) for v in packages["warp"].version.split(".")]),
)

haskell_library(
    name = PACKAGE_NAME,
    srcs = glob(["Network/**/*.hs*"]) + [":paths"],
    compiler_flags = [
        "-Wno-deprecations",
        "-Wno-unused-imports",
    ],
    version = packages[PACKAGE_NAME].version,
    visibility = ["//visibility:public"],
    deps = [
        hazel_library("array"),
        hazel_library("async"),
        hazel_library("auto-update"),
        hazel_library("base"),
        hazel_library("bsb-http-chunked"),
        hazel_library("bytestring"),
        hazel_library("case-insensitive"),
        hazel_library("containers"),
        hazel_library("ghc-prim"),
        hazel_library("hashable"),
        hazel_library("http2"),
        hazel_library("http-date"),
        hazel_library("http-types"),
        hazel_library("iproute"),
        hazel_library("network"),
        hazel_library("simple-sendfile"),
        hazel_library("stm"),
        hazel_library("streaming-commons"),
        hazel_library("text"),
        hazel_library("time-manager"),
        hazel_library("unix"),
        hazel_library("unix-compat"),
        hazel_library("unliftio"),
        hazel_library("vault"),
        hazel_library("wai"),
        hazel_library("word8"),
        hazel_library("x509"),
    ],
)
