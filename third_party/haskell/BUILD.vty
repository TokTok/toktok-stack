load("@ai_formation_hazel//tools:mangling.bzl", "hazel_library")
load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_haskell//haskell:defs.bzl", "haskell_library")
load("@toktok//third_party/haskell:packages.bzl", "packages")

PACKAGE_NAME = "vty"

package(features = ["-layering_check"])

cc_library(
    name = "cbits",
    srcs = glob(["cbits/*.c"]),
    includes = ["cbits"],
    deps = [hazel_library("rts")],
)

haskell_library(
    name = PACKAGE_NAME,
    srcs = glob(
        ["src/**/*.*hs"],
        exclude = ["src/Data/Sequence/**/*.hs"],
    ),
    compiler_flags = [
        "-Wno-incomplete-uni-patterns",
        "-Wno-unused-imports",
        "-Wno-unused-top-binds",
        "-XScopedTypeVariables",
    ],
    version = packages[PACKAGE_NAME].version,
    visibility = ["//visibility:public"],
    deps = [
        ":cbits",
        hazel_library("ansi-terminal"),
        hazel_library("base"),
        hazel_library("binary"),
        hazel_library("blaze-builder"),
        hazel_library("bytestring"),
        hazel_library("containers"),
        hazel_library("deepseq"),
        hazel_library("directory"),
        hazel_library("filepath"),
        hazel_library("hashable"),
        hazel_library("microlens"),
        hazel_library("microlens-mtl"),
        hazel_library("microlens-th"),
        hazel_library("mtl"),
        hazel_library("parallel"),
        hazel_library("parsec"),
        hazel_library("semigroups"),
        hazel_library("stm"),
        hazel_library("terminfo"),
        hazel_library("text"),
        hazel_library("transformers"),
        hazel_library("unix"),
        hazel_library("utf8-string"),
        hazel_library("vector"),
    ],
)
