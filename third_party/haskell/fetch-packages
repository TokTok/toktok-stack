#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';
use utf8;

use Parallel::Iterator qw(iterate);

my $RESOLVER = "https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/21/9.yaml";
my @PACKAGES = map { (/([^.]+)$/)[0] } <BUILD.*>;
my @PATCHES = map { (/([^.]+).patch/)[0] } <*.patch>;
my @LTS_PACKAGES = `curl -s "$RESOLVER" | grep "^- hackage:"`;

push @LTS_PACKAGES, do {
   open my $fh, "<", "../../stack.yaml" or die "../../stack.yaml: $!";
   map { s/^  - /- hackage: /; $_ } grep { /^  - .*:/ } <$fh>
};

@LTS_PACKAGES = do {
   my %map = map { /- hackage: ([^.]*?)-[0-9]+/, $_ } @LTS_PACKAGES;
   sort values %map
};

my $iter = iterate(sub {
   my (undef, $job) = @_;

   my ($package, $version) = $job =~ /- hackage: (.+)-([^-]+)\@sha256:(?:[0-9a-f]+),\d+$/;
   return unless grep { $_ eq $package } @PACKAGES;
   my $patches = do {
      my @patches = map { "[\"\@toktok//third_party/haskell:$_.patch\"]" } grep { $_ eq $package } @PATCHES;
      @patches ? $patches[0] : "None"
   };
   my $path = -f "$package/$package.cabal" ? "\"third_party/haskell/$package\"" : "None";
   my $tar = "$package-$version";
   my $sha256 = `curl -s https://hackage.haskell.org/package/$tar/$tar.tar.gz | sha256sum`;
   $sha256 =~ s/([0-9a-f]+).*\n/$1/;
   <<EOF;
        "$package": struct(
            sha256 = "$sha256",
            version = "$version",
            patches = $patches,
            path = $path,
        ),
EOF
}, \@LTS_PACKAGES);

my $count = 0;
my @out;
while (my ($index, $value) = $iter->()) {
   ++$count;
   print STDERR ("\r$count / " . scalar @LTS_PACKAGES);
   $out[$index] = $value;
}
print STDERR "\n";

print <<EOF;
"""Generated from resolver: lts-21.9"""

core_packages = [
    "Cabal",
    "array",
    "base",
    "binary",
    "bytestring",
    "containers",
    "deepseq",
    "directory",
    "exceptions",
    "filepath",
    "ghc",
    "ghc-bignum",
    "ghc-boot",
    "ghc-boot-th",
    "ghc-compact",
    "ghc-heap",
    "ghc-prim",
    "ghci",
    "haskeline",
    "hpc",
    "integer-gmp",
    "mtl",
    "parsec",
    "pretty",
    "process",
    "rts",
    "stm",
    "template-haskell",
    "terminfo",
    "text",
    "time",
    "transformers",
    "unix",
    "xhtml",
]
packages = (
    {
        "monad-validate": struct(
            sha256 = "f50f12c6560b4bf22a968fd3d73163fad24556c2aa0348a1769588ca998b11f3",
            version = "1.2.0.0",
            patches = None,
            path = None,
        ),
        "persist": struct(
            sha256 = "238bbc5a40f3cfdd251512e22cc74b68e2b1c285f426fa2931cc68c5d69540a7",
            version = "0.1.1.5",
            patches = None,
            path = None,
        ),
        "suspend": struct(
            sha256 = "2f4f5b64837e94859b75dd49b28cf77bc75d70d5ab4f9adacb46ada5da98f072",
            version = "0.2.0.0",
            patches = None,
            path = None,
        ),
        "timers": struct(
            sha256 = "4b057105fa485eb1d9d73b3dd3de0044a00c432efc4aca64c98f14bb9aa2320c",
            version = "0.2.0.4",
            patches = None,
            path = None,
        ),
EOF
print for grep { defined } @out;
print "    }\n";
print ")\n";
